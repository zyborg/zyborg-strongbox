using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.Text;
using Zyborg.Util;

namespace Zyborg.Vault.Logical
{
	// Secret represents the secret part of a response.
	//~ type Secret struct {
	public class Secret : LeaseOptions
	{
		//~ LeaseOptions
		// Base Class

		// InternalData is JSON-encodable data that is stored with the secret.
		// This will be sent back during a Renew/Revoke for storing internal data
		// used for those operations.
		//~ InternalData map[string]interface{} `json:"internal_data"`
		[JsonProperty("internal_data")]
		public IDictionary<string, object> InternalData
		{ get; set; }

		// LeaseID is the ID returned to the user to manage this secret.
		// This is generated by Vault core. Any set value will be ignored.
		// For requests, this will always be blank.
		//~ LeaseID string
		public string LeaseID
		{ get; set; }

		//~ func (s *Secret) Validate() error {
		//~ 	if s.TTL < 0 {
		//~ 		return fmt.Errorf("ttl duration must not be less than zero")
		//~ 	}
		//~ 
		//~ 	return nil
		//~ }
		public void Validate()
		{
			if (TTL < TimeSpan.Zero)
				throw new Exception("ttl duration must not be less than zero");
		}

		//~ func (s *Secret) GoString() string {
		//~ 	return fmt.Sprintf("*%#v", *s)
		//~ }
		public string GoString()
		{
			return $"*{this}"; // TODO: not quite right
		}

		public Secret DeepCopy()
		{
			var copy = new Secret
			{
				InternalData = this.InternalData?.DeepCopy(),
				LeaseID = this.LeaseID,
			};

			return copy;
		}
	}
}
